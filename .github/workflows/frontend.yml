name: Frontend Workflow

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Run tests with coverage
      run: npm run test -- --watch=false --browsers=ChromeHeadless

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage-report
        path: front/coverage

  check-coverage:
      runs-on: ubuntu-latest
      needs: test-and-coverage
      steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage-report
          path: front/coverage

      - name: Check test coverage
        run: |
          COVERAGE_THRESHOLD=80
          # Capture the coverage percentage for Lines from the summary
          COVERAGE=$(grep -Po '(?<=Lines\s+)\d+\.\d+(?=%)' front/coverage/lcov-report/index.html)
          if [ -z "$COVERAGE" ]; then
            echo "Error: Failed to retrieve coverage percentage."
            exit 1
          fi
          echo "Detected coverage: $COVERAGE%"
          if [ $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc) -eq 1 ]; then
            echo "Coverage ($COVERAGE%) is below the threshold ($COVERAGE_THRESHOLD%)"
            exit 1
          fi

  sonarcloud-analysis:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    defaults:
      run:
        working-directory: front

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Install SonarCloud Scanner
      run: npm install -g sonarqube-scanner
      
    - name: Run SonarCloud analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: npx sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.organization=software-developer -Dsonar.projectKey=software-developer_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD-Frontend -Dsonar.host.url=https://sonarcloud.io

    - name: Check Quality Gate status
      run: |
        STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=software-developer_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD-Frontend" \
          | jq -r .projectStatus.status)
        if [ "$STATUS" != "OK" ]; then
          echo "Quality Gate failed: $STATUS"
          exit 1
        fi
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  docker:
    runs-on: ubuntu-latest
    needs: test-and-coverage

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./front
        push: true
        tags: tibrook/bobapp-frontend:latest
